// schema.prisma

generator client {
  provider = "prisma-client-js"
  seed    = "prisma/seed.ts"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"] 
}

datasource db {
  provider = "postgresql"
  url = env("VPS_DATABASE_URL") // uses connection pooling
}

model ParticlesQuestion {
  id   Int   @id @default(autoincrement())
  category     String
  categoryId   Int
  group  String
  isIndex Boolean @default(false)
  options OptionsOnParticlesQuestions[]
  additionalQuestion Additionalquestion?
  character    String?
  answer  String?
}

model Additionalquestion {
  id  Int  @id @default(autoincrement())
  question ParticlesQuestion @relation(fields: [id], references: [id])
  phrase_front String?
  phrase_back String?
  sound_resource String?
}

model ParticlesOption {
  id  Int  @id @default(autoincrement())
  character String
  en String
  image String
  styleHeight String?
  styleWidth String?
  questions OptionsOnParticlesQuestions[]
}

model OptionsOnParticlesQuestions {
  option ParticlesOption @relation(fields: [optionId], references: [id])
  optionId Int
  question ParticlesQuestion @relation(fields: [questionId], references: [id])
  questionId Int
  @@id([questionId, optionId])
}

model RomajisQuestion {
  id   Int   @id @default(autoincrement())
  category   String
  categoryId   Int
  group   String
  groupExp   String
  isIndex   Boolean @default(false)
  hiragana   String
  options   OptionsOnRomajisQuestions[]
}

model RomajisOption {
  id   Int   @id @default(autoincrement())
  option   String
  questions   OptionsOnRomajisQuestions[]
}

model OptionsOnRomajisQuestions {
  option RomajisOption @relation(fields: [optionId], references: [id])
  optionId Int
  question RomajisQuestion @relation(fields: [questionId], references: [id])
  questionId Int
  @@id([questionId, optionId])
}